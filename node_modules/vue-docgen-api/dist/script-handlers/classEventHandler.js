"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
var recast_1 = __importDefault(require("recast"));
var eventHandler_1 = require("./eventHandler");
var getDocblock_1 = __importDefault(require("../utils/getDocblock"));
var getDoclets_1 = __importDefault(require("../utils/getDoclets"));
var resolveIdentifier_1 = __importDefault(require("../utils/resolveIdentifier"));
function classEventHandler(documentation, path, astPath) {
    if (bt.isClassDeclaration(path.node)) {
        recast_1.default.visit(path.node, {
            visitClassMethod: function (path) {
                if (path.node.decorators &&
                    bt.isCallExpression(path.node.decorators[0].expression) &&
                    bt.isIdentifier(path.node.decorators[0].expression.callee) &&
                    path.node.decorators[0].expression.callee.name === 'Emit') {
                    // fetch the leading comments on the wrapping expression
                    var docblock = getDocblock_1.default(path);
                    var doclets = getDoclets_1.default(docblock || '');
                    var eventName = void 0;
                    var eventTags = doclets.tags ? doclets.tags.filter(function (d) { return d.title === 'event'; }) : [];
                    var exp = path.get('decorators', 0).get('expression');
                    // if someone wants to document it with anything else, they can force it
                    if (eventTags.length) {
                        eventName = eventTags[0].content;
                    }
                    else {
                        if (exp.get('arguments').value.length) {
                            var firstArg = exp.get('arguments', 0);
                            if (bt.isIdentifier(firstArg.node)) {
                                firstArg = resolveIdentifier_1.default(astPath, firstArg);
                            }
                            if (!bt.isStringLiteral(firstArg.node)) {
                                return false;
                            }
                            eventName = firstArg.node.value;
                        }
                        else if (bt.isIdentifier(path.node.key)) {
                            eventName = path.node.key.name;
                        }
                        else {
                            return false;
                        }
                    }
                    var evtDescriptor = documentation.getEventDescriptor(eventName);
                    eventHandler_1.setEventDescriptor(evtDescriptor, doclets);
                    return false;
                }
            }
        });
    }
}
exports.default = classEventHandler;
