"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
var getDocblock_1 = __importDefault(require("../utils/getDocblock"));
var getDoclets_1 = __importDefault(require("../utils/getDoclets"));
var methodHandler_1 = require("./methodHandler");
function methodHandler(documentation, path) {
    if (bt.isClassDeclaration(path.node)) {
        var methods = documentation.get('methods') || [];
        var allMethods = path
            .get('body')
            .get('body')
            .filter(function (a) { return bt.isClassMethod(a.node); });
        allMethods.forEach(function (methodPath) {
            var methodName = bt.isIdentifier(methodPath.node.key)
                ? methodPath.node.key.name
                : '<anonymous>';
            var docBlock = getDocblock_1.default(bt.isClassMethod(methodPath.node) ? methodPath : methodPath.parentPath);
            var jsDoc = docBlock ? getDoclets_1.default(docBlock) : { description: '', tags: [] };
            var jsDocTags = jsDoc.tags ? jsDoc.tags : [];
            // ignore the method if there is no public tag
            if (!jsDocTags.some(function (t) { return t.title === 'access' && t.content === 'public'; })) {
                return;
            }
            var methodDescriptor = documentation.getMethodDescriptor(methodName);
            if (jsDoc.description) {
                methodDescriptor.description = jsDoc.description;
            }
            methodHandler_1.setMethodDescriptor(methodDescriptor, methodPath, jsDocTags);
        });
        documentation.set('methods', methods);
    }
}
exports.default = methodHandler;
