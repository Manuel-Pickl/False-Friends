"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
function displayNameHandler(documentation, compDef) {
    if (bt.isObjectExpression(compDef.node)) {
        var namePath = compDef
            .get('properties')
            .filter(function (p) { return bt.isObjectProperty(p.node) && p.node.key.name === 'name'; });
        // if no prop return
        if (!namePath.length) {
            return;
        }
        var nameValuePath = namePath[0].get('value');
        var singleNameValuePath = !Array.isArray(nameValuePath) ? nameValuePath : null;
        var displayName = null;
        if (singleNameValuePath) {
            if (bt.isStringLiteral(singleNameValuePath.node)) {
                displayName = singleNameValuePath.node.value;
            }
            else if (bt.isIdentifier(singleNameValuePath.node)) {
                var nameConstId = singleNameValuePath.node.name;
                displayName = getDeclaredConstantValue(compDef.parentPath.parentPath, nameConstId);
            }
        }
        documentation.set('displayName', displayName);
    }
}
exports.default = displayNameHandler;
function getDeclaredConstantValue(prog, nameConstId) {
    var body = prog.node.body;
    var globalVariableDeclarations = body.filter(function (node) {
        return bt.isVariableDeclaration(node);
    });
    var declarators = globalVariableDeclarations.reduce(function (a, declPath) { return a.concat(declPath.declarations); }, []);
    var nodeDeclaratorArray = declarators.filter(function (d) { return bt.isIdentifier(d.id) && d.id.name === nameConstId; });
    var nodeDeclarator = nodeDeclaratorArray.length ? nodeDeclaratorArray[0] : undefined;
    return nodeDeclarator && nodeDeclarator.init && bt.isStringLiteral(nodeDeclarator.init)
        ? nodeDeclarator.init.value
        : null;
}
