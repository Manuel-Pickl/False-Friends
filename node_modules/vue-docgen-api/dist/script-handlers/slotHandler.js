"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
var recast_1 = __importDefault(require("recast"));
var getDoclets_1 = __importDefault(require("../utils/getDoclets"));
var getDocblock_1 = require("../utils/getDocblock");
function slotHandler(documentation, path) {
    if (bt.isObjectExpression(path.node)) {
        var renderPath = path
            .get('properties')
            .filter(function (p) {
            return (bt.isObjectProperty(p.node) || bt.isObjectMethod(p.node)) && p.node.key.name === 'render';
        });
        // if no prop return
        if (!renderPath.length) {
            return;
        }
        var renderValuePath = bt.isObjectProperty(renderPath[0].node)
            ? renderPath[0].get('value')
            : renderPath[0];
        recast_1.default.visit(renderValuePath.node, {
            // this.$slots.default()
            visitCallExpression: function (pathCall) {
                if (bt.isMemberExpression(pathCall.node.callee) &&
                    bt.isMemberExpression(pathCall.node.callee.object) &&
                    bt.isThisExpression(pathCall.node.callee.object.object) &&
                    bt.isIdentifier(pathCall.node.callee.property) &&
                    (pathCall.node.callee.object.property.name === '$slots' ||
                        pathCall.node.callee.object.property.name === '$scopedSlots')) {
                    var doc = documentation.getSlotDescriptor(pathCall.node.callee.property.name);
                    if (!doc.description || !doc.description.length) {
                        doc.description = getDescription(pathCall);
                    }
                    var bindings = pathCall.node.arguments[0];
                    if (bt.isObjectExpression(bindings)) {
                        doc.bindings = getBindings(bindings);
                    }
                    return false;
                }
                this.traverse(pathCall);
            },
            // this.$slots.mySlot
            visitMemberExpression: function (pathMember) {
                if (bt.isMemberExpression(pathMember.node.object) &&
                    bt.isThisExpression(pathMember.node.object.object) &&
                    bt.isIdentifier(pathMember.node.object.property) &&
                    (pathMember.node.object.property.name === '$slots' ||
                        pathMember.node.object.property.name === '$scopedSlots') &&
                    bt.isIdentifier(pathMember.node.property)) {
                    var doc = documentation.getSlotDescriptor(pathMember.node.property.name);
                    doc.description = getDescription(pathMember);
                    return false;
                }
                this.traverse(pathMember);
            },
            visitJSXElement: function (pathJSX) {
                var tagName = pathJSX.node.openingElement.name;
                var nodeJSX = pathJSX.node;
                if (!bt.isJSXElement(nodeJSX)) {
                    this.traverse(pathJSX);
                    return;
                }
                if (bt.isJSXIdentifier(tagName) && tagName.name === 'slot') {
                    var doc = documentation.getSlotDescriptor(getName(nodeJSX));
                    var parentNode = pathJSX.parentPath.node;
                    if (bt.isJSXElement(parentNode)) {
                        doc.description = getJSXDescription(nodeJSX, parentNode.children);
                    }
                    return false;
                }
                this.traverse(pathJSX);
            }
        });
    }
}
exports.default = slotHandler;
function isStatement(path) {
    return path && (bt.isDeclaration(path.node) || bt.isReturnStatement(path.node));
}
function getName(nodeJSX) {
    var oe = nodeJSX.openingElement;
    var names = oe.attributes.filter(function (a) { return bt.isJSXAttribute(a) && a.name.name === 'name'; });
    var nameNode = names.length ? names[0].value : null;
    return nameNode && bt.isStringLiteral(nameNode) ? nameNode.value : 'default';
}
function getJSXDescription(nodeJSX, siblings) {
    if (!siblings) {
        return '';
    }
    var indexInParent = siblings.indexOf(nodeJSX);
    var commentExpression = null;
    for (var i = indexInParent - 1; i > -1; i--) {
        var currentNode = siblings[i];
        if (bt.isJSXExpressionContainer(currentNode)) {
            commentExpression = currentNode;
            break;
        }
    }
    if (!commentExpression || !commentExpression.expression.innerComments) {
        return '';
    }
    var cmts = commentExpression.expression.innerComments;
    var lastComment = cmts[cmts.length - 1];
    return parseCommentNode(lastComment);
}
function getDescription(path) {
    var desc = getExpressionDescription(path);
    if (desc.length) {
        return desc;
    }
    // in case we don't find a description on the expression,
    // look for it on the containing statement
    // 1: find the statement
    var i = 10;
    while (i-- && path && !isStatement(path)) {
        path = path.parentPath;
    }
    // 2: extract the description if it exists
    return path ? getExpressionDescription(path) : '';
}
function getExpressionDescription(path) {
    var node = path.node;
    if (!node.leadingComments || node.leadingComments.length === 0) {
        return '';
    }
    return parseCommentNode(node.leadingComments[node.leadingComments.length - 1]);
}
function parseCommentNode(node) {
    if (node.type !== 'CommentBlock') {
        return '';
    }
    var docBlock = getDocblock_1.parseDocblock(node.value).trim();
    var jsDoc = getDoclets_1.default(docBlock);
    if (!jsDoc.tags) {
        return '';
    }
    var slotTags = jsDoc.tags.filter(function (t) { return t.title === 'slot'; });
    if (slotTags.length) {
        var tagContent = slotTags[0].content;
        return typeof tagContent === 'string' ? tagContent : '';
    }
    return '';
}
function getBindings(node) {
    return node.properties.reduce(function (bindings, prop) {
        var desc = prop.leadingComments && prop.leadingComments.length
            ? getDocblock_1.parseDocblock(prop.leadingComments[prop.leadingComments.length - 1].value)
            : undefined;
        bindings[prop.key.name] = desc || '-';
        return bindings;
    }, {});
}
