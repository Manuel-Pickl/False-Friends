"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
var recast_1 = __importDefault(require("recast"));
var getDocblock_1 = __importDefault(require("../utils/getDocblock"));
var getDoclets_1 = __importDefault(require("../utils/getDoclets"));
var transformTagsIntoObject_1 = __importDefault(require("../utils/transformTagsIntoObject"));
var getPropsFilter_1 = __importDefault(require("../utils/getPropsFilter"));
function propHandler(documentation, path) {
    if (bt.isObjectExpression(path.node)) {
        var propsPath = path
            .get('properties')
            .filter(function (p) { return bt.isObjectProperty(p.node) && getPropsFilter_1.default('props')(p); });
        // if no prop return
        if (!propsPath.length) {
            return;
        }
        var propsValuePath = propsPath[0].get('value');
        if (bt.isObjectExpression(propsValuePath.node)) {
            var objProp = propsValuePath.get('properties');
            // filter non object properties
            var objPropFiltered = objProp.filter(function (p) { return bt.isProperty(p.node); });
            objPropFiltered.forEach(function (prop) {
                var propNode = prop.node;
                // description
                var docBlock = getDocblock_1.default(prop);
                var jsDoc = docBlock ? getDoclets_1.default(docBlock) : { description: '', tags: [] };
                var jsDocTags = jsDoc.tags ? jsDoc.tags : [];
                // if it's the v-model describe it only as such
                var propName = jsDocTags.some(function (t) { return t.title === 'model'; })
                    ? 'v-model'
                    : propNode.key.name || propNode.key.value;
                var propDescriptor = documentation.getPropDescriptor(propName);
                // save real prop name for reference when v-model
                propDescriptor.name = propNode.key.name || propNode.key.value;
                var propValuePath = prop.get('value');
                propDescriptor.tags = jsDocTags.length ? transformTagsIntoObject_1.default(jsDocTags) : {};
                if (jsDoc.description) {
                    propDescriptor.description = jsDoc.description;
                }
                if (bt.isArrayExpression(propValuePath.node) || bt.isIdentifier(propValuePath.node)) {
                    // if it's an immediately typed property, resolve its type immediately
                    propDescriptor.type = getTypeFromTypePath(propValuePath);
                }
                else if (bt.isObjectExpression(propValuePath.node)) {
                    // standard default + type + required
                    var propPropertiesPath = propValuePath
                        .get('properties')
                        .filter(function (p) { return bt.isObjectProperty(p.node) || bt.isObjectMethod(p.node); });
                    // type
                    describeType(propPropertiesPath, propDescriptor);
                    // required
                    describeRequired(propPropertiesPath, propDescriptor);
                    // default
                    describeDefault(propPropertiesPath, propDescriptor);
                }
                else if (bt.isTSAsExpression(propValuePath.node)) {
                    // standard default + type + required with TS as annotation
                    var propPropertiesPath = propValuePath
                        .get('expression')
                        .get('properties')
                        .filter(function (p) { return bt.isObjectProperty(p.node); });
                    // type
                    propDescriptor.type = getTypeFromTypePath(propValuePath);
                    // required
                    describeRequired(propPropertiesPath, propDescriptor);
                    // default
                    describeDefault(propPropertiesPath, propDescriptor);
                }
                else {
                    // in any other case, just display the code for the typing
                    propDescriptor.type = {
                        name: recast_1.default.print(prop.get('value')).code,
                        func: true
                    };
                }
            });
        }
        else if (bt.isArrayExpression(propsValuePath.node)) {
            propsValuePath
                .get('elements')
                .filter(function (e) { return bt.isStringLiteral(e.node); })
                .forEach(function (e) {
                var propDescriptor = documentation.getPropDescriptor(e.node.value);
                propDescriptor.type = { name: 'undefined' };
                propDescriptor.required = '';
            });
        }
    }
}
exports.default = propHandler;
function describeType(propPropertiesPath, propDescriptor) {
    var typeArray = propPropertiesPath.filter(getPropsFilter_1.default('type'));
    if (typeArray.length) {
        propDescriptor.type = getTypeFromTypePath(typeArray[0].get('value'));
    }
    else {
        // deduce the type from default expression
        var defaultArray = propPropertiesPath.filter(getPropsFilter_1.default('default'));
        if (defaultArray.length) {
            var typeNode = defaultArray[0].node;
            if (bt.isObjectProperty(typeNode)) {
                var func = bt.isArrowFunctionExpression(typeNode.value) || bt.isFunctionExpression(typeNode.value);
                var typeValueNode = defaultArray[0].get('value').node;
                var typeName = typeof typeValueNode.value;
                propDescriptor.type = { name: func ? 'func' : typeName };
            }
        }
    }
}
exports.describeType = describeType;
var VALID_VUE_TYPES = [
    'string',
    'number',
    'boolean',
    'array',
    'object',
    'date',
    'function',
    'symbol'
];
function getTypeFromTypePath(typePath) {
    var typeNode = typePath.node;
    var typeName = bt.isTSAsExpression(typeNode) &&
        bt.isTSTypeReference(typeNode.typeAnnotation) &&
        typeNode.typeAnnotation.typeParameters
        ? recast_1.default.print(typeNode.typeAnnotation.typeParameters.params[0]).code
        : bt.isArrayExpression(typeNode)
            ? typePath
                .get('elements')
                .map(function (t) { return getTypeFromTypePath(t).name; })
                .join('|')
            : typeNode &&
                bt.isIdentifier(typeNode) &&
                VALID_VUE_TYPES.indexOf(typeNode.name.toLowerCase()) > -1
                ? typeNode.name.toLowerCase()
                : recast_1.default.print(typeNode).code;
    return {
        name: typeName === 'function' ? 'func' : typeName
    };
}
function describeRequired(propPropertiesPath, propDescriptor) {
    var requiredArray = propPropertiesPath.filter(getPropsFilter_1.default('required'));
    var requiredNode = requiredArray.length ? requiredArray[0].get('value').node : undefined;
    propDescriptor.required =
        requiredNode && bt.isBooleanLiteral(requiredNode) ? requiredNode.value : '';
}
exports.describeRequired = describeRequired;
function describeDefault(propPropertiesPath, propDescriptor) {
    var defaultArray = propPropertiesPath.filter(getPropsFilter_1.default('default'));
    if (defaultArray.length) {
        if (bt.isObjectProperty(defaultArray[0].value)) {
            var defaultPath = defaultArray[0].get('value');
            var parenthesized = false;
            if (bt.isArrowFunctionExpression(defaultPath.node) &&
                bt.isObjectExpression(defaultPath.node.body) // if () => ({})
            ) {
                defaultPath = defaultPath.get('body');
                var extra = defaultPath.node.extra;
                if (extra && extra.parenthesized) {
                    parenthesized = true;
                }
            }
            var rawValue = recast_1.default.print(defaultPath).code;
            propDescriptor.defaultValue = {
                func: bt.isFunction(defaultPath.node),
                value: parenthesized ? rawValue.slice(1, rawValue.length - 1) : rawValue
            };
        }
        else {
            var defaultPath = defaultArray[0].get('body');
            var rawValue = recast_1.default.print(defaultPath).code;
            propDescriptor.defaultValue = {
                func: bt.isFunction(defaultPath.node),
                value: "function()" + rawValue.trim()
            };
        }
    }
}
exports.describeDefault = describeDefault;
