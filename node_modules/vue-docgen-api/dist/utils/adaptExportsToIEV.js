"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var recast_1 = __importDefault(require("recast"));
var ts_map_1 = __importDefault(require("ts-map"));
var babel_parser_1 = __importDefault(require("../babel-parser"));
var cacher_1 = __importDefault(require("./cacher"));
var resolveImmediatelyExported_1 = __importDefault(require("./resolveImmediatelyExported"));
function adaptExportsToIEV(pathResolver, varToFilePath) {
    // key: filepath, content: {key: localName, content: exportedName}
    var filePathToVars = new ts_map_1.default();
    Object.keys(varToFilePath).forEach(function (k) {
        var exportedVariable = varToFilePath[k];
        var exportToLocalMap = filePathToVars.get(exportedVariable.filePath) || new ts_map_1.default();
        exportToLocalMap.set(k, exportedVariable.exportName);
        filePathToVars.set(exportedVariable.filePath, exportToLocalMap);
    });
    filePathToVars.forEach(function (exportToLocal, filePath) {
        if (filePath && exportToLocal) {
            var exportedVariableNames_1 = [];
            exportToLocal.forEach(function (exportedName) {
                if (exportedName) {
                    exportedVariableNames_1.push(exportedName);
                }
            });
            try {
                var fullFilePath_1 = pathResolver(filePath);
                var source_1 = fs.readFileSync(fullFilePath_1, {
                    encoding: 'utf-8'
                });
                var astRemote = cacher_1.default(function () { return recast_1.default.parse(source_1, { parser: babel_parser_1.default() }); }, source_1);
                var returnedVariables_1 = resolveImmediatelyExported_1.default(astRemote, exportedVariableNames_1);
                exportToLocal.forEach(function (exported, local) {
                    if (exported && local) {
                        var aliasedVariable = returnedVariables_1[exported];
                        if (aliasedVariable) {
                            aliasedVariable.filePath = pathResolver(aliasedVariable.filePath, path.dirname(fullFilePath_1));
                            varToFilePath[local] = aliasedVariable;
                        }
                    }
                });
            }
            catch (e) {
                // ignore load errors
            }
        }
    });
}
exports.default = adaptExportsToIEV;
