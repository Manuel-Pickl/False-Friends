"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bt = __importStar(require("@babel/types"));
var recast_1 = __importDefault(require("recast"));
var ts_map_1 = __importDefault(require("ts-map"));
var isExportedAssignment_1 = __importDefault(require("./isExportedAssignment"));
var resolveExportDeclaration_1 = __importDefault(require("./resolveExportDeclaration"));
var resolveIdentifier_1 = __importDefault(require("./resolveIdentifier"));
function ignore() {
    return false;
}
function isComponentDefinition(path) {
    return (
    // export default {}
    bt.isObjectExpression(path.node) ||
        // export const myComp = {}
        (bt.isVariableDeclarator(path.node) &&
            path.node.init &&
            bt.isObjectExpression(path.node.init)) ||
        // export default Vue.extend({})
        (bt.isCallExpression(path.node) &&
            bt.isMemberExpression(path.node.callee) &&
            path.node.callee.property.name === 'extend' &&
            ((bt.isIdentifier(path.node.callee.object) && path.node.callee.object.name === 'Vue') ||
                // or export default (Vue as VueConstructor<Vue>).extend({})
                (bt.isTSAsExpression(path.node.callee.object) &&
                    bt.isIdentifier(path.node.callee.object.expression) &&
                    path.node.callee.object.expression.name === 'Vue'))) ||
        // export default class MyComp extends VueComp
        bt.isClassDeclaration(path.node));
}
/**
 * Given an AST, this function tries to find the exported component definitions.
 *
 * If a definition is part of the following statements, it is considered to be
 * exported:
 *
 * modules.exports = Definition;
 * exports.foo = Definition;
 * export default Definition;
 * export var Definition = ...;
 */
function resolveExportedComponent(ast) {
    var components = new ts_map_1.default();
    function setComponent(exportName, definition) {
        if (definition && !components.get(exportName)) {
            components.set(exportName, normalizeComponentPath(definition));
        }
    }
    // function run for every non "assignment" export declaration
    // in extenso export default or export myvar
    function exportDeclaration(path) {
        var definitions = resolveExportDeclaration_1.default(path);
        definitions.forEach(function (definition, name) {
            var realDef = resolveIdentifier_1.default(ast, definition);
            if (realDef && isComponentDefinition(realDef)) {
                setComponent(name, realDef);
            }
        });
        return false;
    }
    recast_1.default.visit(ast.program, {
        // for perf resons,
        // look only at the root,
        // ignore all traversing except for if
        visitFunctionDeclaration: ignore,
        visitFunctionExpression: ignore,
        visitClassDeclaration: ignore,
        visitClassExpression: ignore,
        visitWithStatement: ignore,
        visitSwitchStatement: ignore,
        visitWhileStatement: ignore,
        visitDoWhileStatement: ignore,
        visitForStatement: ignore,
        visitForInStatement: ignore,
        visitDeclareExportDeclaration: exportDeclaration,
        visitExportNamedDeclaration: exportDeclaration,
        visitExportDefaultDeclaration: exportDeclaration,
        visitAssignmentExpression: function (path) {
            // function run on every assignments (with an =)
            // Ignore anything that is not `exports.X = ...;` or
            // `module.exports = ...;`
            if (!isExportedAssignment_1.default(path)) {
                return false;
            }
            // Resolve the value of the right hand side. It should resolve to a call
            // expression, something like Vue.extend({})
            var pathRight = path.get('right');
            var pathLeft = path.get('left');
            var realComp = resolveIdentifier_1.default(ast, pathRight);
            if (!realComp || !isComponentDefinition(realComp)) {
                return false;
            }
            var name = bt.isMemberExpression(pathLeft.node) &&
                bt.isIdentifier(pathLeft.node.property) &&
                pathLeft.node.property.name !== 'exports'
                ? pathLeft.node.property.name
                : 'default';
            setComponent(name, realComp);
            return false;
        }
    });
    return components;
}
exports.default = resolveExportedComponent;
function normalizeComponentPath(path) {
    if (bt.isObjectExpression(path.node)) {
        return path;
    }
    else if (bt.isCallExpression(path.node)) {
        return path.get('arguments', 0);
    }
    else if (bt.isVariableDeclarator(path.node)) {
        return path.get('init');
    }
    return path;
}
