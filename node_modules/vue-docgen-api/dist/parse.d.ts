import Documentation, { Descriptor } from './Documentation';
import { Handler as ScriptHandler } from './parse-script';
import { Handler as TemplateHandler } from './parse-template';
export { ScriptHandler, TemplateHandler };
export interface ParseOptions extends DocGenOptions, Descriptor {
    filePath: string;
    /**
     * In what language is the component written
     * @default undefined - let the system decide
     */
    lang?: 'ts' | 'js';
}
export interface DocGenOptions {
    /**
     * Which exported variables should be looked at
     * @default undefined - means treat all dependencies
     */
    nameFilter?: string[];
    /**
     * What alias should be replaced in requires and imports
     */
    alias?: {
        [alias: string]: string;
    };
    /**
     * What directories should be searched when resolving modules
     */
    modules?: string[];
    /**
     * Handlers that will be added at the end of the script analysis
     */
    addScriptHandlers?: ScriptHandler[];
    /**
     * Handlers that will be added at the end of the template analysis
     */
    addTemplateHandlers?: TemplateHandler[];
    /**
     * Does parsed components use jsx?
     * @default true - if you do not disable it, babel will fail with `(<any>window).$`
     */
    jsx?: boolean;
}
/**
 * parses the source and returns the doc
 * @param {string} source code whose documentation is parsed
 * @param {string} filePath path of the current file against whom to resolve the mixins
 * @returns {object} documentation object
 */
export declare function parseFile(documentation: Documentation, opt: ParseOptions): void;
/**
 * parses the source and returns the doc
 * @param {string} source code whose documentation is parsed
 * @param {string} filePath path of the current file against whom to resolve the mixins
 * @returns {object} documentation object
 */
export declare function parseSource(documentation: Documentation, source: string, opt: ParseOptions): void;
