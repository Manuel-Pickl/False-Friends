"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var recast_1 = __importDefault(require("recast"));
var babel_parser_1 = __importDefault(require("./babel-parser"));
var cacher_1 = __importDefault(require("./utils/cacher"));
var resolveExportedComponent_1 = __importDefault(require("./utils/resolveExportedComponent"));
var ERROR_MISSING_DEFINITION = 'No suitable component definition found';
function parseScript(source, documentation, handlers, options) {
    var plugins = options.lang === 'ts' ? ['typescript'] : ['flow'];
    if (options.jsx) {
        plugins.push('jsx');
    }
    var ast = cacher_1.default(function () { return recast_1.default.parse(source, { parser: babel_parser_1.default({ plugins: plugins }) }); }, source);
    if (!ast) {
        throw new Error(ERROR_MISSING_DEFINITION + " on \"" + options.filePath + "\"");
    }
    var componentDefinitions = resolveExportedComponent_1.default(ast);
    if (componentDefinitions.size === 0) {
        throw new Error(ERROR_MISSING_DEFINITION + " on \"" + options.filePath + "\"");
    }
    executeHandlers(handlers, componentDefinitions, documentation, ast, options);
}
exports.default = parseScript;
function executeHandlers(localHandlers, componentDefinitions, documentation, ast, opt) {
    return componentDefinitions.forEach(function (compDef, name) {
        if (compDef && name && (!opt.nameFilter || opt.nameFilter.indexOf(name) > -1)) {
            localHandlers.forEach(function (handler) { return handler(documentation, compDef, ast, opt); });
        }
    });
}
